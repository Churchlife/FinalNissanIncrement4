using NissanCartTest01.WebUi.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;

namespace NissanCartTest01.WebUi.Models
{
    public class SampleData : DropCreateDatabaseIfModelChanges<ApplicationDbContext>
    {
        protected override void Seed(ApplicationDbContext context)
        {
            List<Genre> genres = new List<Genre>()
            {
                new Genre { Name = "Hatch" },
                new Genre { Name = "Sedan" },
                new Genre { Name = "Crossover" },
                new Genre { Name = "SUV" },
                new Genre { Name = "Commercial" },
                new Genre { Name = "Sports Coupe" }
            };

            foreach (var gen in genres)
            {
                context.Genres.Add(gen);
            }
            context.SaveChanges();
            //}.ForEach(a => context.Albums.Add(a));




            List<VehCat> ila = new List<VehCat>()
            {

            new VehCat { VehicleId=1, Make = "Nissan", Genre = genres.Single(g => g.Name == "Hatch"), Name="Micra",Model= "1.2 Visia + Insync 5 Door (D86V)", Transmission="Manual", EngineSize=1.2M, PowerMaximum=56,TorqueMaximum=104,MaxSpeed=166,Acceleration=13.2M,FuelType= "Petrol", FuelConsumption=5.2M,C02Emissions=124,FuelTankCapacity=41,FuelRange=789,Segment="Passenger Car",NumofDoors=5,NumofSeats=5,LoadVolume=265,NumofAirbags=4,ABS="Standard",TractionControl="N/A",EBD="Standard",StabilityControl="NO",WarrantyDuration=3,WarrantyDistance=100000,ServicePlan="N/A",ServiceDistance="N/A",MaintenancePlan="N/A",MaintenanceDistance="N/A",Airconditioning="Standard",Navigation="NO",RainSensingAutoWipers="NO",ElectricWindows="Front",ElectricSeats="NO",CentralLocking="Remote",CDPlayer="CD",DaytimeRunningLights="NO",OnboardComputer="NO",ClimateControl="NO",KeylessAccess="YES",AutomaticLights="NO",ElectricMirrors="NO",PowerSteering="Standard",BluetoothConnectivity="NO",LeatherUpholstering="NO",MultiFunctSteeringWheel="NO",ParkDistControl="NO", Price = 159900.00M, AlbumArtUrl = "/Content/Images/Micra1.jpg" },
            new VehCat { VehicleId=2, Make = "Nissan", Genre = genres.Single(g => g.Name == "Hatch"), Name="Micra",Model= "1.2 Visia + Insync 5 Door (D86V)", Transmission="Manual", EngineSize=1.2M, PowerMaximum=56,TorqueMaximum=104,MaxSpeed=166,Acceleration=13.2M,FuelType= "Petrol", FuelConsumption=5.2M,C02Emissions=124,FuelTankCapacity=41,FuelRange=789,Segment="Passenger Car",NumofDoors=5,NumofSeats=5,LoadVolume=265,NumofAirbags=4,ABS="Standard",TractionControl="N/A",EBD="Standard",StabilityControl="NO",WarrantyDuration=3,WarrantyDistance=100000,ServicePlan="N/A",ServiceDistance="N/A",MaintenancePlan="N/A",MaintenanceDistance="N/A",Airconditioning="Standard",Navigation="NO",RainSensingAutoWipers="NO",ElectricWindows="Front",ElectricSeats="NO",CentralLocking="Remote",CDPlayer="CD",DaytimeRunningLights="NO",OnboardComputer="NO",ClimateControl="NO",KeylessAccess="YES",AutomaticLights="NO",ElectricMirrors="NO",PowerSteering="Standard",BluetoothConnectivity="NO",LeatherUpholstering="NO",MultiFunctSteeringWheel="NO",ParkDistControl="NO", Price = 159900.00M, AlbumArtUrl = "/Content/Images/Micra1.jpg" },
            new VehCat { VehicleId=3, Make = "Nissan", Genre = genres.Single(g => g.Name == "Hatch"), Name="Micra",Model= "1.2 Visia + Insync 5 Door (D86V)", Transmission="Manual", EngineSize=1.2M, PowerMaximum=56,TorqueMaximum=104,MaxSpeed=166,Acceleration=13.2M,FuelType= "Petrol", FuelConsumption=5.2M,C02Emissions=124,FuelTankCapacity=41,FuelRange=789,Segment="Passenger Car",NumofDoors=5,NumofSeats=5,LoadVolume=265,NumofAirbags=4,ABS="Standard",TractionControl="N/A",EBD="Standard",StabilityControl="NO",WarrantyDuration=3,WarrantyDistance=100000,ServicePlan="N/A",ServiceDistance="N/A",MaintenancePlan="N/A",MaintenanceDistance="N/A",Airconditioning="Standard",Navigation="NO",RainSensingAutoWipers="NO",ElectricWindows="Front",ElectricSeats="NO",CentralLocking="Remote",CDPlayer="CD",DaytimeRunningLights="NO",OnboardComputer="NO",ClimateControl="NO",KeylessAccess="YES",AutomaticLights="NO",ElectricMirrors="NO",PowerSteering="Standard",BluetoothConnectivity="NO",LeatherUpholstering="NO",MultiFunctSteeringWheel="NO",ParkDistControl="NO", Price = 159900.00M, AlbumArtUrl = "/Content/Images/Micra1.jpg" }



            };
            foreach(var veh in ila)
            {
                context.VehCats.Add(veh);
            }
            //new Albums { Title = "Plays Metallica By Four Cellos", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Apocalyptica"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Revelations", Genres = genres.Single(g => g.Name == "Alternative"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Audioslave"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Audioslave", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Audioslave"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Last Night of the Proms", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Barry Wordsworth & BBC Concert Orchestra"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Sibelius: Finlandia", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Berliner Philharmoniker & Hans Rosbaud"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Mozart: Symphonies Nos. 40 & 41", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Berliner Philharmoniker & Herbert Von Karajan"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Best Of Billy Cobham", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Billy Cobham"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Alcohol Fueled Brewtality Live! [Disc 1]", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Black Label Society"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Alcohol Fueled Brewtality Live! [Disc 2]", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Black Label Society"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Black Sabbath Vol. 4 (Remaster)", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Black Sabbath"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Black Sabbath", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Black Sabbath"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Carmina Burana", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Boston Symphony Orchestra & Seiji Ozawa"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "A Soprano Inspired", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Britten Sinfonia, Ivor Bolton & Lesley Garrett"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Chemical Wedding", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Bruce Dickinson"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Prenda Minha", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Caetano Veloso"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Sozinho Remix Ao Vivo", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Caetano Veloso"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Cake: B-Sides and Rarities", Genres = genres.Single(g => g.Name == "Alternative"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Cake"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Carried to Dust (Bonus Track Version)", Genres = genres.Single(g => g.Name == "Alternative"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Calexico"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Cássia Eller - Sem Limite [Disc 1]", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Cássia Eller"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Le Freak", Genres = genres.Single(g => g.Name == "Disco"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chic"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Scheherazade", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chicago Symphony Orchestra & Fritz Reiner"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Minha Historia", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chico Buarque"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Afrociberdelia", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chico Science & Nação Zumbi"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Da Lama Ao Caos", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chico Science & Nação Zumbi"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Carry On", Genres = genres.Single(g => g.Name == "Alternative"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Chris Cornell"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "SCRIABIN: Vers la flamme", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Christopher O'Riley"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Acústico MTV [Live]", Genres = genres.Single(g => g.Name == "Reggae"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Cidade Negra"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Cidade Negra - Hits", Genres = genres.Single(g => g.Name == "Reggae"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Cidade Negra"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Na Pista", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Cláudio Zoli"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Chronicle, Vol. 1", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Creedence Clearwater Revival"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Chronicle, Vol. 2", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Creedence Clearwater Revival"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Into The Light", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "David Coverdale"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Come Taste The Band", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Deep Purple In Rock", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Fireball", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Machine Head", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "MK III The Final Concerts [Disc 1]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Purpendicular", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Slaves And Masters", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Stormbringer", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Battle Rages On", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Final Concerts (Disc 2)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Deep Purple"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Outbreak", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Dennis Chambers"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Djavan Ao Vivo - Vol. 02", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Djavan"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Djavan Ao Vivo - Vol. 1", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Djavan"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "MacArthur Park Suite", Genres = genres.Single(g => g.Name == "Disco"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Donna Summer"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Un-Led-Ed", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Dread Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Best of Ed Motta", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ed Motta"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Adams, John: The Chairman Dances", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Edo de Waart & San Francisco Symphony"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Elis Regina-Minha História", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Elis Regina"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Pachelbel: Canon & Gigue", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "English Concert & Trevor Pinnock"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Unplugged", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Eric Clapton"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Cream Of Clapton", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Eric Clapton"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Unplugged", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Eric Clapton"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Respighi:Pines of Rome", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Eugene Ormandy"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Strauss: Waltzes", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Eugene Ormandy"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "King For A Day Fool For A Lifetime", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Faith No More"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Deixa Entrar", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Falamansa"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "In Your Honor [Disc 1]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Foo Fighters"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "In Your Honor [Disc 2]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Foo Fighters"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Colour And The Shape", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Foo Fighters"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Bongo Fury", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Frank Zappa & Captain Beefheart"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Roda De Funk", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Funk Como Le Gusta"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Quanta Gente Veio Ver (Live)", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Gilberto Gil"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Quanta Gente Veio ver--Bônus De Carnaval", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Gilberto Gil"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Faceless", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Godsmack"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Meus Momentos", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Gonzaguinha"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Nielsen: The Six Symphonies", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Göteborgs Symfoniker & Neeme Järvi"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Appetite for Destruction", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Guns N' Roses"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Use Your Illusion I", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Guns N' Roses"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Use Your Illusion II", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Guns N' Roses"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Blue Moods", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Incognito"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "A Matter of Life and Death", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Brave New World", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Fear Of The Dark", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Live At Donington 1992 (Disc 1)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Live At Donington 1992 (Disc 2)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Rock In Rio [CD2]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Number of The Beast", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The X Factor", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Virtual XI", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "A Real Dead One", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "A Real Live One", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Live After Death", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "No Prayer For The Dying", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Piece Of Mind", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Powerslave", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Rock In Rio [CD1]", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Rock In Rio [CD2]", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Seventh Son of a Seventh Son", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Somewhere in Time", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Number of The Beast", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Iron Maiden", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Iron Maiden"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Mascagni: Cavalleria Rusticana", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "James Levine"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Emergency On Planet Earth", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Jamiroquai"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Are You Experienced?", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Jimi Hendrix"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Surfing with the Alien (Remastered)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Joe Satriani"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Jorge Ben Jor 25 Anos", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Jorge Ben"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Jota Quest-1995", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Jota Quest"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Living After Midnight", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Judas Priest"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Weill: The Seven Deadly Sins", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Kent Nagano and Orchestre de l'Opéra de Lyon"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Greatest Kiss", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Kiss"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Unplugged [Live]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Kiss"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "BBC Sessions [Disc 1] [Live]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "BBC Sessions [Disc 2] [Live]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Coda", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Houses Of The Holy", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "In Through The Out Door", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "IV", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Led Zeppelin I", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Led Zeppelin II", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Led Zeppelin III", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Physical Graffiti [Disc 1]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Physical Graffiti [Disc 2]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Presence", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Song Remains The Same (Disc 1)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Song Remains The Same (Disc 2)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Led Zeppelin"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Mais Do Mesmo", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Legião Urbana"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Greatest Hits", Genres = genres.Single(g => g.Name == "Reggae"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Lenny Kravitz"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Greatest Hits", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Lenny Kravitz"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Greatest Hits", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Lenny Kravitz"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Tchaikovsky: The Nutcracker", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "London Symphony Orchestra & Sir Charles Mackerras"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Duos II", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Luciana Souza/Romero Lubambo"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Chill: Brazil (Disc 1)", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Marcos Valle"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Misplaced Childhood", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Marillion"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Barulhinho Bom", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Marisa Monte"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Szymanowski: Piano Works, Vol. 1", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Martin Roscoe"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "The Best Of Men At Work", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Men At Work"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "...And Justice For All", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Black Albums", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Garage Inc. (Disc 1)", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Garage Inc. (Disc 2)", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" });
            //new Albums { Title = "Load", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Master Of Puppets", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "ReLoad", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Ride The Lightning", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "St. Anger", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Metallica"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Berlioz: Symphonie Fantastique", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Michael Tilson Thomas & San Francisco Symphony"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Prokofiev: Romeo & Juliet", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Michael Tilson Thomas & San Francisco Symphony"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Miles Ahead", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Miles Davis"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Essential Miles Davis [Disc 1]", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Miles Davis"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Essential Miles Davis [Disc 2]", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Miles Davis"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Milton Nascimento Ao Vivo", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Milton Nascimento"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Minas", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Milton Nascimento"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Motley Crue Greatest Hits", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Mötley Crüe"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Ace Of Spades", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Motörhead"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Mozart: Chamber Music", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Nash Ensemble"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Best of Beethoven", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Nicolaus Esterhazy Sinfonia"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Nevermind", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Nirvana"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Compositores", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "O Terço"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Olodum", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Olodum"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bach: The Brandenburg Concertos", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Orchestra of The Age of Enlightenment"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Acústico MTV", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Os Paralamas Do Sucesso"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Arquivo II", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Os Paralamas Do Sucesso"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Arquivo Os Paralamas Do Sucesso", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Os Paralamas Do Sucesso"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Tribute", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bark at the Moon (Remastered)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Blizzard of Ozz", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Diary of a Madman (Remastered)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "No More Tears (Remastered)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Speak of the Devil", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ozzy Osbourne"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Walking Into Clarksdale", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Page & Plant"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Beast Live", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Paul D'Ianno"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Live On Two Legs [Live]", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Pearl Jam"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Riot Act", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Pearl Jam"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Ten", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Pearl Jam"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Vs.", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Pearl Jam"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Dark Side Of The Moon", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Pink Floyd"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Greatest Hits I", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Queen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Greatest Hits II", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Queen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "News Of The World", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Queen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "New Adventures In Hi-Fi", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "R.E.M."), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Raul Seixas", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Raul Seixas"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "By The Way", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Red Hot Chili Peppers"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Californication", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Red Hot Chili Peppers"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Purcell: The Fairy Queen", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Roger Norrington, London Classical Players"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Haydn: Symphonies 99 - 104", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Royal Philharmonic Orchestra & Sir Thomas Beecham"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Retrospective I (1974-1980)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Rush"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Santana - As Years Go By", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Santana"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Santana Live", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Santana"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Supernatural", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Santana"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Handel: The Messiah (Highlights)", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Scholars Baroque Ensemble"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Prokofiev: Symphony No.1", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Sergei Prokofiev & Yuri Temirkanov"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Wagner: Favourite Overtures", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Sir Georg Solti & Wiener Philharmoniker"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Maquinarama", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Skank"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "O Samba Poconé", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Skank"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "A-Sides", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Soundgarden"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Heart of the Night", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Spyro Gyra"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Morning Dance", Genres = genres.Single(g => g.Name == "Jazz"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Spyro Gyra"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "In Step", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Stevie Ray Vaughan & Double Trouble"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Core", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Stone Temple Pilots"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Mezmerize", Genres = genres.Single(g => g.Name == "Metal"), Price = 8.99M, Artist = artists.Single(a => a.Name == "System Of A Down"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Temple of the Dog", Genres = genres.Single(g => g.Name == "Alternative"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Temple of the Dog"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "[1997] Black Light Syndrome", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Terry Bozzio, Tony Levin & Steve Stevens"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "South American Getaway", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The 12 Cellists of The Berlin Philharmonic"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Live [Disc 1]", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Black Crowes"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Live [Disc 2]", Genres = genres.Single(g => g.Name == "Blues"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Black Crowes"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Beyond Good And Evil", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Cult"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Doors", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Doors"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "English Renaissance", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The King's Singers"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Police Greatest Hits", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Police"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Every Kind of Light", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Posies"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Hot Rocks, 1964-1971 (Disc 1)", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Rolling Stones"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "No Security", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Rolling Stones"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Voodoo Lounge", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Rolling Stones"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "My Generation - The Very Best Of The Who", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "The Who"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Serie Sem Limite (Disc 1)", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Tim Maia"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Serie Sem Limite (Disc 2)", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Tim Maia"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bach: Toccata & Fugue in D Minor", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Ton Koopman"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Achtung Baby", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "B-Sides 1980-1990", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "How To Dismantle An Atomic Bomb", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Pop", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Rattle And Hum", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Best Of 1980-1990", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "War", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Zooropa", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "U2"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "UB40 The Best Of - Volume Two [UK]", Genres = genres.Single(g => g.Name == "Reggae"), Price = 8.99M, Artist = artists.Single(a => a.Name == "UB40"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Diver Down", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Van Halen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "The Best Of Van Halen, Vol. I", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Van Halen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Van Halen III", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Van Halen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Van Halen", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Van Halen"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Axé Bahia 2001", Genres = genres.Single(g => g.Name == "Pop"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Various Artists"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Sambas De Enredo 2001", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Various Artists"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Vozes do MPB", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Various Artists"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Contraband", Genres = genres.Single(g => g.Name == "Rock"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Velvet Revolver"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Vinicius De Moraes", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Vinícius De Moraes"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bach: Goldberg Variations", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Wilhelm Kempff"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bartok: Violin & Viola Concertos", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Yehudi Menuhin"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Bach: The Cello Suites", Genres = genres.Single(g => g.Name == "Classical"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Yo-Yo Ma"), AlbumArtUrl = "/Content/Images/placeholder.gif" },
            //new Albums { Title = "Ao Vivo [IMPORT]", Genres = genres.Single(g => g.Name == "Latin"), Price = 8.99M, Artist = artists.Single(a => a.Name == "Zeca Pagodinho"), AlbumArtUrl = "/Content/Images/placeholder.gif" },



            context.SaveChanges();
            base.Seed(context);
        }
    }
}